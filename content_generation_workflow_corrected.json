{
  "name": "Content Generation System",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generate-content",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        240,
        300
      ],
      "id": "webhook-trigger",
      "name": "Webhook",
      "webhookId": "generate-content-webhook"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "extract-videoid",
              "name": "videoId",
              "value": "={{ $json.body.videoId }}",
              "type": "string"
            },
            {
              "id": "extract-prompt-id",
              "name": "promptId",
              "value": "={{ $json.body.prompt.id }}",
              "type": "string"
            },
            {
              "id": "extract-prompt-nombre",
              "name": "promptNombre",
              "value": "={{ $json.body.prompt.nombre }}",
              "type": "string"
            },
            {
              "id": "extract-prompt-contenido",
              "name": "promptContenido",
              "value": "={{ $json.body.prompt.contenido }}",
              "type": "string"
            },
            {
              "id": "extract-callback",
              "name": "callbackUrl",
              "value": "={{ $json.body.callback_url || '' }}",
              "type": "string"
            },
            {
              "id": "extract-webhook-id",
              "name": "webhook_id",
              "value": "={{ $json.body.webhook_id || '' }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        460,
        300
      ],
      "id": "extract-data",
      "name": "Extract Data"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "validate-topic",
              "leftValue": "={{ $json.topic }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        680,
        300
      ],
      "id": "validate-input",
      "name": "Validate Input"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "error-response",
              "name": "error",
              "value": "Missing required field: topic",
              "type": "string"
            },
            {
              "id": "status-code",
              "name": "status",
              "value": 400,
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        680,
        500
      ],
      "id": "validation-error",
      "name": "Validation Error"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Generate high-quality content about: {{ $json.topic }}\n\nContent Type: {{ $json.type }}\nAudience: {{ $json.audience }}\nLength: {{ $json.length }}\n\nPlease create comprehensive, engaging content that provides real value to the audience.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are an expert content creator specializing in creating high-quality, engaging content across various formats and topics.\n\nYour task is to generate content based on the provided parameters:\n- Topic: The main subject matter\n- Type: Format (blog, article, social media, video script, etc.)\n- Audience: Target demographic (general, professional, technical, etc.)\n- Length: Content size (short, medium, long)\n\nYour response must be a valid JSON object with this exact structure:\n\n{\n    \"title\": \"compelling title\",\n    \"content\": \"main content body\",\n    \"summary\": \"brief summary\",\n    \"tags\": [\"tag1\", \"tag2\", \"tag3\"],\n    \"meta_description\": \"SEO meta description\",\n    \"word_count\": 0,\n    \"reading_time\": \"X minutes\",\n    \"content_type\": \"type\",\n    \"target_audience\": \"audience\"\n}\n\nGuidelines:\n- Create original, valuable content\n- Ensure content matches the specified type and audience\n- Use appropriate tone and complexity level\n- Include relevant examples when applicable\n- Make content actionable and informative\n- Optimize for readability and engagement\n\nContent Length Guidelines:\n- Short: 300-500 words\n- Medium: 800-1200 words\n- Long: 1500-2500 words\n\nEnsure all content is accurate, well-researched, and provides genuine value to the reader."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        900,
        300
      ],
      "id": "ai-content-generator",
      "name": "AI Content Generator"
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n    \"title\": \"title\",\n    \"content\": \"content\",\n    \"summary\": \"summary\",\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"meta_description\": \"meta description\",\n    \"word_count\": 0,\n    \"reading_time\": \"reading time\",\n    \"content_type\": \"type\",\n    \"target_audience\": \"audience\"\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1120,
        480
      ],
      "id": "content-output-parser",
      "name": "Content Output Parser"
    },
    {
      "parameters": {
        "modelName": "gpt-4o",
        "options": {
          "temperature": 0.7,
          "maxTokens": 2000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        740,
        480
      ],
      "id": "openai-model",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "openai-credentials",
          "name": "OpenAI API Key"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-content-generated",
              "leftValue": "={{ $json.output.title }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1340,
        300
      ],
      "id": "validate-generation",
      "name": "Validate Generation"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "success-response",
              "name": "success",
              "value": true,
              "type": "boolean"
            },
            {
              "id": "generated-content",
              "name": "content",
              "value": "={{ $('AI Content Generator').item.json.output }}",
              "type": "object"
            },
            {
              "id": "generation-timestamp",
              "name": "generated_at",
              "value": "={{ $now }}",
              "type": "string"
            },
            {
              "id": "processing-time",
              "name": "processing_time_ms",
              "value": "={{ $now.diff($('Webhook').item.json.timestamp) }}",
              "type": "number"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1560,
        200
      ],
      "id": "success-response",
      "name": "Success Response"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "generation-error",
              "name": "error",
              "value": "Failed to generate content",
              "type": "string"
            },
            {
              "id": "error-status",
              "name": "status",
              "value": 500,
              "type": "number"
            },
            {
              "id": "success-flag",
              "name": "success",
              "value": false,
              "type": "boolean"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1560,
        400
      ],
      "id": "generation-error",
      "name": "Generation Error"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-callback-url",
              "leftValue": "={{ $('Extract Data').item.json.callback_url }}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "isNotEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1780,
        300
      ],
      "id": "check-callback",
      "name": "Check Callback"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Extract Data').item.json.callback_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Webhook-Source",
              "value": "content-generation-system"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"webhook_id\": \"{{ $('Extract Data').item.json.webhook_id }}\",\n  \"success\": {{ $json.success }},\n  \"data\": {{ $json.toJsonString() }}\n}",
        "options": {
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        200
      ],
      "id": "success-callback",
      "name": "Success Callback"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{ $('Extract Data').item.json.callback_url }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "X-Webhook-Source",
              "value": "content-generation-system"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"webhook_id\": \"{{ $('Extract Data').item.json.webhook_id }}\",\n  \"success\": {{ $json.success }},\n  \"error\": \"{{ $json.error }}\",\n  \"timestamp\": \"{{ $now }}\"\n}",
        "options": {
          "timeout": 10000
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1780,
        400
      ],
      "id": "error-callback",
      "name": "Error Callback"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2000,
        200
      ],
      "id": "success-webhook-response",
      "name": "Success Webhook Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": "={{ $json.status || 400 }}",
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        2000,
        400
      ],
      "id": "error-webhook-response",
      "name": "Error Webhook Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {
          "responseCode": "={{ $json.status || 400 }}",
          "responseHeaders": {
            "entries": [
              {
                "name": "Content-Type",
                "value": "application/json"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        900,
        500
      ],
      "id": "validation-webhook-response",
      "name": "Validation Webhook Response"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Data": {
      "main": [
        [
          {
            "node": "Validate Input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validate Input": {
      "main": [
        [
          {
            "node": "AI Content Generator",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Error": {
      "main": [
        [
          {
            "node": "Validation Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Content Generator": {
      "main": [
        [
          {
            "node": "Validate Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Content Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Content Generator",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Content Generator",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validate Generation": {
      "main": [
        [
          {
            "node": "Success Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Generation Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Response": {
      "main": [
        [
          {
            "node": "Check Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generation Error": {
      "main": [
        [
          {
            "node": "Check Callback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Callback": {
      "main": [
        [
          {
            "node": "Success Callback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Success Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Success Callback": {
      "main": [
        [
          {
            "node": "Success Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Callback": {
      "main": [
        [
          {
            "node": "Error Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "content-gen-v1",
  "meta": {
    "templateCredsSetupCompleted": false
  },
  "id": "ContentGenerationSystem",
  "tags": []
}